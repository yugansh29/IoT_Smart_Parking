const int NUM_SENSORS = 8;
const int trigPins[NUM_SENSORS] = {2, 3, 4, 5, 6, 7, 8, 9}; // Example trig pin numbers
const int echoPins[NUM_SENSORS] = {12, 13, 14, 15, 16, 17, 18, 19}; // Example echo pin numbers

#include <WiFi.h>
#include "ThingSpeak.h"

const char* ssid = "Mi11x";   // your network SSID (name) 
const char* password = "Incorrect123";   // your network password

unsigned long lastTime = 0;
unsigned long timerDelay = 30000;

WiFiClient  client;

unsigned long myChannelNumber = 1;
const char * myWriteAPIKey = "PGX3HGH3U4JBXFWQ";

#define SOUND_SPEED 0.034

long durations[NUM_SENSORS];
float distancesCm[NUM_SENSORS];
int distances[NUM_SENSORS]; // Array to store distances as 0 or 1

void setup() {
  Serial.begin(115200); // Starts the serial communication
  WiFi.mode(WIFI_STA);

ThingSpeak.begin(client);

  for (int i = 0; i < NUM_SENSORS; i++) {
    pinMode(trigPins[i], OUTPUT); // Sets the trigPins as Outputs
    pinMode(echoPins[i], INPUT); // Sets the echoPins as Inputs
  }
}

void loop() {
  if ((millis() - lastTime) > timerDelay) {

    if(WiFi.status() != WL_CONNECTED){
      Serial.print("Attempting to connect");
      while(WiFi.status() != WL_CONNECTED){
        WiFi.begin(ssid, password); 
        delay(5000);     
      } 
      Serial.println("\nConnected.");
    }
    for (int i = 0; i < NUM_SENSORS; i++) {
    // Clears the trigPin
    digitalWrite(trigPins[i], LOW);
    delayMicroseconds(2);
    // Sets the trigPin on HIGH state for 10 micro seconds
    digitalWrite(trigPins[i], HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPins[i], LOW);
    
    // Reads the echoPin, returns the sound wave travel time in microseconds
    durations[i] = pulseIn(echoPins[i], HIGH);
    
    // Calculate the distance
    distancesCm[i] = durations[i] * SOUND_SPEED / 2;
    
    // Check if distance is greater than 100 cm (1 meter)
    if (distancesCm[i] > 100) {
      distances[i] = 0; // Set distance to 0
    } else {
      distances[i] = 1; // Set distance to 1
    }
      Serial.print("Sensor ");
      Serial.print(i);
      Serial.print(" - Distance: ");
      Serial.println(distances[i]); // Print distance (0 or 1)
      int x = ThingSpeak.writeField(myChannelNumber, i, distances[i], myWriteAPIKey);
  
        if(x == 200){
      Serial.println("Channel update successful.");
    }
    else{
      Serial.println("Problem updating channel. HTTP error code " + String(x));
    }
  }    
  }
    lastTime = millis();
}
